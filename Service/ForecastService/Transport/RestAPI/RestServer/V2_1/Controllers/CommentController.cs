using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using ForecastService.Interface;
using ForecastService.Interface.Models.DTO;
using Microsoft.AspNetCore.Mvc;
using Service.Interface.Base;
#if USESWAGGER
using System.Net;
using Swashbuckle.AspNetCore.Annotations;
#endif

namespace ForecastService.RestServer.V2_1.Controllers
{
    /// <summary>
    /// Controller responsible for weather forecasts comments
    /// </summary>
    [ApiController]
    [Route("[controller]")]
    [Route("v{version:apiVersion}/[controller]")]
    [ApiVersion("2.1")]
    public class CommentController : ControllerBaseForecastService
    {
        // SwaggerResponse with BadRequest makes interface generated by AutoRest very ugly (response with object - no strong type in interface)

        /// <summary>
        /// ctor
        /// </summary>
        public CommentController(IForecastService weatherService) : base(weatherService)
        {
        }

        /// <summary>
        /// Returns comments for forecast
        /// </summary>
        /// <param name="forecastId">Forecast id</param>
        /// <param name="cancellationToken">Operation cancellation notification</param>
        [HttpGet("{forecastId}")]
#if USESWAGGER
        [SwaggerResponse((int)HttpStatusCode.OK, "Comments are returned", typeof(IEnumerable<ForecastCommentDto>))]
        [SwaggerResponse((int)HttpStatusCode.NotFound, "Forecast not found")]
        [SwaggerResponse((int)HttpStatusCode.BadRequest, "Invalid request")]
        [SwaggerResponse((int)HttpStatusCode.InternalServerError, "Request failed due to server-side error")]
#endif
        public Task<ActionResult<IReadOnlyCollection<ForecastCommentDto>?>> GetForecastComments(Guid forecastId, CancellationToken cancellationToken)
        {
            return CallService(svc => svc.GetForecastComments(forecastId, cancellationToken));
        }

        /// <summary>
        /// Creates new comment
        /// </summary>
        /// <param name="forecastId">Forecast id</param>
        /// <param name="commentData">Comment data</param>
        /// <param name="cancellationToken">Operation cancellation notification</param>
        [HttpPost("{forecastId}")]
#if USESWAGGER
        [SwaggerResponse((int)HttpStatusCode.Created, "Comment was created and returned", typeof(ForecastCommentDto))]
        [SwaggerResponse((int)HttpStatusCode.NotFound, "Forecast not found")]
        [SwaggerResponse((int)HttpStatusCode.BadRequest, "Invalid request")]
        [SwaggerResponse((int)HttpStatusCode.InternalServerError, "Request failed due to server-side error")]
#endif
        public Task<ActionResult<ForecastCommentDto?>> AddComment(Guid forecastId, [FromBody] ForecastCommentDataDto commentData, CancellationToken cancellationToken)
        {
            return CallService(
                svc => svc.AddComment(forecastId, commentData, cancellationToken),
                result => result?.ResultCode switch
                {
                    ResultCode.Ok => CreatedAtAction(nameof(GetComment), new { forecastId = result?.Result?.ForecastId, commentId = result?.Result?.Id }, result?.Result),
                    _ => ConvertCommonActionResult(result)
                }
                );
        }

        /// <summary>
        /// Returns specified comment
        /// </summary>
        /// <param name="forecastId">Forecast id</param>
        /// <param name="commentId">Comment id</param>
        /// <param name="cancellationToken">Operation cancellation notification</param>
        [HttpGet("{forecastId}/{commentId}")]
#if USESWAGGER
        [SwaggerResponse((int)HttpStatusCode.OK, "Comment is returned", typeof(ForecastCommentDto))]
        [SwaggerResponse((int)HttpStatusCode.NotFound, "Comment not found")]
        [SwaggerResponse((int)HttpStatusCode.BadRequest, "Invalid request")]
        [SwaggerResponse((int)HttpStatusCode.InternalServerError, "Request failed due to server-side error")]
#endif
        public Task<ActionResult<ForecastCommentDto?>> GetComment(Guid forecastId, Guid commentId, CancellationToken cancellationToken)
        {
            return CallService(svc => svc.GetComment(forecastId, commentId, cancellationToken));
        }

        /// <summary>
        /// Updates comment
        /// </summary>
        /// <param name="forecastId">Forecast id</param>
        /// <param name="commentId">comment id</param>
        /// <param name="commentData">Comment</param>
        /// <param name="cancellationToken">Operation cancellation notification</param>
        [HttpPut("{forecastId}/{commentId}")]
#if USESWAGGER
        [SwaggerResponse((int)HttpStatusCode.Created, "Comment was updated and returned", typeof(ForecastCommentDto))]
        [SwaggerResponse((int)HttpStatusCode.NotFound, "Comment not found")]
        [SwaggerResponse((int)HttpStatusCode.BadRequest, "Invalid request")]
        [SwaggerResponse((int)HttpStatusCode.InternalServerError, "Request failed due to server-side error")]
#endif
        public Task<ActionResult<ForecastCommentDto?>> UpdateComment(Guid forecastId, Guid commentId, [FromBody] ForecastCommentDataDto commentData, CancellationToken cancellationToken)
        {
            return CallService(svc => svc.UpdateComment(forecastId, commentId, commentData, cancellationToken));
        }
    }
}
