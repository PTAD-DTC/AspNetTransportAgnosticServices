using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using CommentService.Interface;
using CommentService.Interface.Models.DTO;
using Microsoft.AspNetCore.Mvc;
using Service.Interface.Base;
#if USESWAGGER
using System.Net;
using Swashbuckle.AspNetCore.Annotations;
#endif

namespace CommentService.RestServer.Controllers.V1_0
{
    /// <summary>
    /// Controller responsible for comments
    /// </summary>
    [ApiController]
    [Route("[controller]")]
    [Route("v{version:apiVersion}/[controller]")]
    [ApiVersion("1.0")]
    public class CommentController : ControllerBaseCommentService
    {
        // SwaggerResponse with BadRequest makes interface generated by AutoRest very ugly (response with object - no strong type in interface)

        /// <summary>
        /// ctor
        /// </summary>
        public CommentController(ICommentService commentService) : base(commentService)
        {
        }

        /// <summary>
        /// Returns comments for subject
        /// </summary>
        /// <param name="subjectId">Subject id</param>
        /// <param name="cancellationToken">Operation cancellation notification</param>
        [HttpGet("subject/{subjectId}")]
#if USESWAGGER
        [SwaggerResponse((int)HttpStatusCode.OK, "Comments are returned", typeof(IEnumerable<CommentDto>))]
        [SwaggerResponse((int)HttpStatusCode.NotFound, "Forecast not found")]
        [SwaggerResponse((int)HttpStatusCode.BadRequest, "Invalid request")]
        [SwaggerResponse((int)HttpStatusCode.InternalServerError, "Request failed due to server-side error")]
#endif
        public Task<ActionResult<IReadOnlyCollection<CommentDto>?>> GetSubjectComments(Guid subjectId, CancellationToken cancellationToken)
        {
            return CallService(svc => svc.GetSubjectComments(subjectId, cancellationToken));
        }

        /// <summary>
        /// Creates new comment
        /// </summary>
        /// <param name="subjectId">Subject id</param>
        /// <param name="commentData">Comment request</param>
        /// <param name="cancellationToken">Operation cancellation notification</param>
        [HttpPost("subject/{subjectId}")]
#if USESWAGGER
        [SwaggerResponse((int)HttpStatusCode.Created, "Comment was created and returned", typeof(CommentDto))]
        [SwaggerResponse((int)HttpStatusCode.NotFound, "Forecast not found")]
        [SwaggerResponse((int)HttpStatusCode.BadRequest, "Invalid request")]
        [SwaggerResponse((int)HttpStatusCode.InternalServerError, "Request failed due to server-side error")]
#endif
        public Task<ActionResult<CommentDto?>> AddComment(Guid subjectId, [FromBody] CommentDataDto commentData, CancellationToken cancellationToken)
        {
            return CallService(
                svc => svc.AddComment(subjectId, commentData, cancellationToken),
                result => result?.ResultCode switch
                {
                    ResultCode.Ok => CreatedAtAction(nameof(FindComment), 
                        new { commentId = result?.Result?.Id },
                        result?.Result),
                    _ => ConvertCommonActionResult(result)
                }
                );
        }

        /// <summary>
        /// Returns specified comment
        /// </summary>
        /// <param name="commentId">Comment id</param>
        /// <param name="cancellationToken">Operation cancellation notification</param>
        [HttpGet("comment/{commentId}")]
#if USESWAGGER
        [SwaggerResponse((int)HttpStatusCode.OK, "Comment is returned", typeof(CommentDto))]
        [SwaggerResponse((int)HttpStatusCode.NotFound, "Comment not found")]
        [SwaggerResponse((int)HttpStatusCode.BadRequest, "Invalid request")]
        [SwaggerResponse((int)HttpStatusCode.InternalServerError, "Request failed due to server-side error")]
#endif
        public Task<ActionResult<CommentDto?>> FindComment(Guid commentId, CancellationToken cancellationToken)
        {
            return CallService(svc => svc.FindComment(commentId, cancellationToken));
        }

        /// <summary>
        /// Updates comment
        /// </summary>
        /// <param name="commentId">comment id</param>
        /// <param name="commentData">Comment</param>
        /// <param name="cancellationToken">Operation cancellation notification</param>
        [HttpPut("comment/{commentId}")]
#if USESWAGGER
        [SwaggerResponse((int)HttpStatusCode.Created, "Comment was updated and returned", typeof(CommentDto))]
        [SwaggerResponse((int)HttpStatusCode.NotFound, "Comment not found")]
        [SwaggerResponse((int)HttpStatusCode.BadRequest, "Invalid request")]
        [SwaggerResponse((int)HttpStatusCode.InternalServerError, "Request failed due to server-side error")]
#endif
        public Task<ActionResult<CommentDto?>> UpdateComment(Guid commentId, [FromBody] CommentDataDto commentData, CancellationToken cancellationToken)
        {
            return CallService(svc => svc.UpdateComment(commentId, commentData, cancellationToken));
        }
    }
}
